Microsoft (R) Macro Assembler Version 14.28.29335.0	    03/13/21 09:07:58
<Project 6 - String Primitives and Macros Parameters     (Pr  Page 1 - 1


				TITLE Project 6 - String Primitives and Macros Parameters     (Proj6_cheshirj.asm)

				; Author: John Cheshire
				; Last Modified: March 6, 2021
				; OSU email address: cheshirj@oregonstate.edu
				; Course number/section:   CS271 Section 401
				; Project Number: 6                Due Date: March 14, 2021
				; Description:	This program reads in 10 integers as strings, converts the strings to SDWORDS,
				;				displays the numbers, calculates the average, and calculates the sum of the numbers.
				;				It then reads in 10 floats as strings, converts them to floating point numbers,
				;				displays the numbers, calculates the average, and calculates the sum of the numbers.


				INCLUDE Irvine32.inc
			      C ; Include file for Irvine32.lib             (Irvine32.inc)
			      C 
			      C ;OPTION CASEMAP:NONE		; optional: make identifiers case-sensitive
			      C 
			      C INCLUDE SmallWin.inc		; MS-Windows prototypes, structures, and constants
			      C .NOLIST
			      C .LIST
			      C 
			      C INCLUDE VirtualKeys.inc
			      C ; VirtualKeys.inc
			      C 
			      C ;  Standard MS-Windows Virtual Key definitions
			      C 
 = 00000001		      C VK_LBUTTON      = 01H
 = 00000002		      C VK_RBUTTON      = 02H
 = 00000003		      C VK_CANCEL       = 03H
 = 00000008		      C VK_BACK         = 08H
 = 00000009		      C VK_TAB          = 09H
 = 0000000C		      C VK_CLEAR        = 0cH
 = 0000000D		      C VK_RETURN       = 0dH
 = 00000010		      C VK_SHIFT        = 10H
 = 00000011		      C VK_CONTROL      = 11H
 = 00000012		      C VK_MENU         = 12H
 = 00000013		      C VK_PAUSE        = 13H
 = 00000014		      C VK_CAPITAL      = 14H
 = 0000001B		      C VK_ESCAPE       = 1bH
 = 00000020		      C VK_SPACE        = 20H
			      C 
 = 00000021		      C VK_PRIOR        = 21H
 = 00000022		      C VK_NEXT         = 22H
 = 00000023		      C VK_END          = 23H
 = 00000024		      C VK_HOME         = 24H
 = 00000025		      C VK_LEFT         = 25H
 = 00000026		      C VK_UP           = 26H
 = 00000027		      C VK_RIGHT        = 27H
 = 00000028		      C VK_DOWN         = 28H
			      C 
			      C ;  VK_A thru VK_Z are the same as their ASCII equivalents: 'A' thru 'Z'
			      C ;  VK_0 thru VK_9 are the same as their ASCII equivalents: '0' thru '0'
			      C 
 = 0000002A		      C VK_PRINT        = 2aH
 = 0000002B		      C VK_EXECUTE      = 2bH
 = 0000002C		      C VK_SNAPSHOT     = 2ch   ; Printscreen key..
 = 0000002D		      C VK_INSERT       = 2dH
 = 0000002E		      C VK_DELETE       = 2eH
 = 0000002F		      C VK_HELP         = 2fH
			      C 
 = 00000060		      C VK_NUMPAD0      = 60H
 = 00000061		      C VK_NUMPAD1      = 61H
 = 00000062		      C VK_NUMPAD2      = 62H
 = 00000063		      C VK_NUMPAD3      = 63H
 = 00000064		      C VK_NUMPAD4      = 64H
 = 00000065		      C VK_NUMPAD5      = 65H
 = 00000066		      C VK_NUMPAD6      = 66H
 = 00000067		      C VK_NUMPAD7      = 67H
 = 00000068		      C VK_NUMPAD8      = 68H
 = 00000069		      C VK_NUMPAD9      = 69H
 = 0000006A		      C VK_MULTIPLY     = 6AH
 = 0000006B		      C VK_ADD          = 6BH
 = 0000006C		      C VK_SEPARATER    = 6CH
 = 0000006D		      C VK_SUBTRACT     = 6DH
 = 0000006E		      C VK_DECIMAL      = 6EH
 = 0000006F		      C VK_DIVIDE       = 6FH
			      C 
 = 00000070		      C VK_F1           = 70H
 = 00000071		      C VK_F2           = 71H
 = 00000072		      C VK_F3           = 72H
 = 00000073		      C VK_F4           = 73H
 = 00000074		      C VK_F5           = 74H
 = 00000075		      C VK_F6           = 75H
 = 00000076		      C VK_F7           = 76H
 = 00000077		      C VK_F8           = 77H
 = 00000078		      C VK_F9           = 78H
 = 00000079		      C VK_F10          = 79H
 = 0000007A		      C VK_F11          = 7aH
 = 0000007B		      C VK_F12          = 7bH
 = 0000007C		      C VK_F13          = 7cH
 = 0000007D		      C VK_F14          = 7dH
 = 0000007E		      C VK_F15          = 7eH
 = 0000007F		      C VK_F16          = 7fH
 = 00000080		      C VK_F17          = 80H
 = 00000081		      C VK_F18          = 81H
 = 00000082		      C VK_F19          = 82H
 = 00000083		      C VK_F20          = 83H
 = 00000084		      C VK_F21          = 84H
 = 00000085		      C VK_F22          = 85H
 = 00000086		      C VK_F23          = 86H
 = 00000087		      C VK_F24          = 87H
			      C 
 = 00000090		      C VK_NUMLOCK      = 90H
 = 00000091		      C VK_SCROLL       = 91H
			      C 
			      C 
			      C .NOLIST
			      C .LIST
			      C 

				;--------------------------------------------------------------------------------------------------------------
				; Name: mGetString
				;
				; Description:	Shows the user a prompt and then reads in a string of up to the specified size while storing the
				;				number of bytes read in the specified variable.
				;
				; Preconditions:
				;
				; Postconditions: None
				;
				; Receives:
				;			prompt			= Address of string to display to user as prompt
				;			inputLocaiton	= Address of array of bytes to store read-in string
				;			strMax			= Maximun number of characters to read
				;			charRead		= Address of variable to store number of characters read
				;
				; Returns:
				;			inputLocation	= Updated with read-in string
				;			charRead		= Number of characters read from input
				;
				;--------------------------------------------------------------------------------------------------------------
				mGetString		MACRO	prompt:REQ, inputLocation:REQ, strMax:REQ, charRead:REQ
					; Move changed registers onto the stack
					PUSH		EAX
					PUSH		ECX
					PUSH		EDX

					; Display the promopt
					MOV			EDX, prompt
					CALL		WriteString

					; Read in the user's input
					MOV			EDX, inputLocation
					MOV			ECX, strMax
					CALL		ReadString

					; Record number of bytes read
					MOV			[charRead], EAX

					; Restores the modified registers
					POP			EDX
					POP			ECX
					POP			EAX
				ENDM

				;--------------------------------------------------------------------------------------------------------------
				; Name: mDisplayString
				;
				; Description: Displays a string to the console
				;
				; Preconditions: None
				;
				; Postconditions: None
				;
				; Receives:
				;			displayStr	= Address of a string to display
				;
				; Returns: Nothing
				;
				;--------------------------------------------------------------------------------------------------------------
				mDisplayString		MACRO	displayStr:REQ
					; Move changed registers onto the stack
					PUSH		EDX

					; Display the string
					MOV			EDX, displayStr
					CALL		WriteString

					; Restores the modified registers
					POP			EDX
				ENDM

				; Constants
 = 0000000B				SDWORD_LENGTH	= 11				; Number of digits in an SDWORD type plus space for sign
 = 00000031				REAL4_LENGTH	= 49				; Max digits and decimal point in REAL4 (1.4E-45) plus space for sign
 = 00000033				MAX_READ		= REAL4_LENGTH + 2  ; Max number of digits to read, gives space for null and extra for detecting long input
 = 0000000A				VALUE_COUNT		= 10				; The number of values to read in

 00000000			.data
 00000000 50 72 6F 6A 65		intro				BYTE	"Project 6 - String Primitives and Macros -- by John Cheshire",13,10,13,10,0
	   63 74 20 36 20
	   2D 20 53 74 72
	   69 6E 67 20 50
	   72 69 6D 69 74
	   69 76 65 73 20
	   61 6E 64 20 4D
	   61 63 72 6F 73
	   20 2D 2D 20 62
	   79 20 4A 6F 68
	   6E 20 43 68 65
	   73 68 69 72 65
	   0D 0A 0D 0A 00
 00000041 2A 2A 45 43 3A		extraCredit			BYTE	"**EC: Each line asking for input is numbered",13,10,"and the running total sum is displayed",13,10
	   20 45 61 63 68
	   20 6C 69 6E 65
	   20 61 73 6B 69
	   6E 67 20 66 6F
	   72 20 69 6E 70
	   75 74 20 69 73
	   20 6E 75 6D 62
	   65 72 65 64 0D
	   0A 61 6E 64 20
	   74 68 65 20 72
	   75 6E 6E 69 6E
	   67 20 74 6F 74
	   61 6C 20 73 75
	   6D 20 69 73 20
	   64 69 73 70 6C
	   61 79 65 64 0D
	   0A
 00000097  2A 2A 45 43 3A							BYTE	"**EC: ReadFloatVal and WriteFloatVal are implemented,",13,10,"to handle floating point numbers",13,10,13,10,0
	   20 52 65 61 64
	   46 6C 6F 61 74
	   56 61 6C 20 61
	   6E 64 20 57 72
	   69 74 65 46 6C
	   6F 61 74 56 61
	   6C 20 61 72 65
	   20 69 6D 70 6C
	   65 6D 65 6E 74
	   65 64 2C 0D 0A
	   74 6F 20 68 61
	   6E 64 6C 65 20
	   66 6C 6F 61 74
	   69 6E 67 20 70
	   6F 69 6E 74 20
	   6E 75 6D 62 65
	   72 73 0D 0A 0D
	   0A 00
 000000F3 50 6C 65 61 73		instructionsInt		BYTE	"Please enter ten signed decimal integers.",13,10
	   65 20 65 6E 74
	   65 72 20 74 65
	   6E 20 73 69 67
	   6E 65 64 20 64
	   65 63 69 6D 61
	   6C 20 69 6E 74
	   65 67 65 72 73
	   2E 0D 0A
 0000011E  4E 75 6D 62 65							BYTE	"Numbers must be between 2,147,483,647 and -2,147,483,648 (inclusive).",13,10
	   72 73 20 6D 75
	   73 74 20 62 65
	   20 62 65 74 77
	   65 65 6E 20 32
	   2C 31 34 37 2C
	   34 38 33 2C 36
	   34 37 20 61 6E
	   64 20 2D 32 2C
	   31 34 37 2C 34
	   38 33 2C 36 34
	   38 20 28 69 6E
	   63 6C 75 73 69
	   76 65 29 2E 0D
	   0A
 00000165  41 64 64 69 74							BYTE	"Additionally, the sum of the numbers must also be between those numbers.",13,10,13,10
	   69 6F 6E 61 6C
	   6C 79 2C 20 74
	   68 65 20 73 75
	   6D 20 6F 66 20
	   74 68 65 20 6E
	   75 6D 62 65 72
	   73 20 6D 75 73
	   74 20 61 6C 73
	   6F 20 62 65 20
	   62 65 74 77 65
	   65 6E 20 74 68
	   6F 73 65 20 6E
	   75 6D 62 65 72
	   73 2E 0D 0A 0D
	   0A
 000001B1  54 68 65 20 70							BYTE	"The program will display the numbers, their sum, and their average.",13,10,13,10,0
	   72 6F 67 72 61
	   6D 20 77 69 6C
	   6C 20 64 69 73
	   70 6C 61 79 20
	   74 68 65 20 6E
	   75 6D 62 65 72
	   73 2C 20 74 68
	   65 69 72 20 73
	   75 6D 2C 20 61
	   6E 64 20 74 68
	   65 69 72 20 61
	   76 65 72 61 67
	   65 2E 0D 0A 0D
	   0A 00
 000001F9  00000033 [			sdwordString		BYTE	MAX_READ DUP(0)
	    00
	   ]
 0000022C  00000033 [			real4String			BYTE	MAX_READ DUP(0)
	    00
	   ]
 0000025F  0000000A [			readValueInt		SDWORD	VALUE_COUNT DUP(0)
	    00000000
	   ]
 00000287  0000000A [			readValueFloat		REAL4	VALUE_COUNT DUP(0.0)
	    00000000
	   ]
 000002AF 00000000			bytesRead			DWORD	0
 000002B3 00000000			numberCount			DWORD	0
 000002B7 00000000			subTotal			SDWORD	0
 000002BB 49 6E 70 75 74		numberCountText		BYTE	"Input #",0
	   20 23 00
 000002C3 20 2D 20 53 75		subTotalText		BYTE	" - Subtotal: ",0
	   62 74 6F 74 61
	   6C 3A 20 00
 000002D1 20 2D 20 50 6C		enterPromptInt		BYTE	" - Please enter a signed interger: ",0
	   65 61 73 65 20
	   65 6E 74 65 72
	   20 61 20 73 69
	   67 6E 65 64 20
	   69 6E 74 65 72
	   67 65 72 3A 20
	   00
 000002F5 50 6C 65 61 73		enterPromptReal		BYTE	"Please enter a floating point number: ",0
	   65 20 65 6E 74
	   65 72 20 61 20
	   66 6C 6F 61 74
	   69 6E 67 20 70
	   6F 69 6E 74 20
	   6E 75 6D 62 65
	   72 3A 20 00
 0000031C 59 6F 75 20 64		errorPrompt			BYTE	"You didn't enter a number in the proper format or it was too large!",13,10
	   69 64 6E 27 74
	   20 65 6E 74 65
	   72 20 61 20 6E
	   75 6D 62 65 72
	   20 69 6E 20 74
	   68 65 20 70 72
	   6F 70 65 72 20
	   66 6F 72 6D 61
	   74 20 6F 72 20
	   69 74 20 77 61
	   73 20 74 6F 6F
	   20 6C 61 72 67
	   65 21 0D 0A
 00000361  50 6C 65 61 73							BYTE	"Please try again: ",0
	   65 20 74 72 79
	   20 61 67 61 69
	   6E 3A 20 00
 00000374 59 6F 75 20 65		textEnterVals		BYTE	"You entered these numbers: ",0
	   6E 74 65 72 65
	   64 20 74 68 65
	   73 65 20 6E 75
	   6D 62 65 72 73
	   3A 20 00
 00000390 2C 20 00			commaSpace			BYTE	", ",0
 00000393 54 68 65 20 73		textSum				BYTE	"The sum of the values is: ",0
	   75 6D 20 6F 66
	   20 74 68 65 20
	   76 61 6C 75 65
	   73 20 69 73 3A
	   20 00
 000003AE 54 68 65 20 61		textAvg				BYTE	"The average of the values is: ",0
	   76 65 72 61 67
	   65 20 6F 66 20
	   74 68 65 20 76
	   61 6C 75 65 73
	   20 69 73 3A 20
	   00
 000003CD 54 68 61 6E 6B		goodBye				BYTE	"Thanks for trying the program, have a great day!!",13,10,0
	   73 20 66 6F 72
	   20 74 72 79 69
	   6E 67 20 74 68
	   65 20 70 72 6F
	   67 72 61 6D 2C
	   20 68 61 76 65
	   20 61 20 67 72
	   65 61 74 20 64
	   61 79 21 21 0D
	   0A 00


 00000000			.code
 00000000			main				PROC
					;-------------------------------------------------------------------
					; Display program introduction, extra credit lines,
					; and explain how the program works.
					;-------------------------------------------------------------------
					; Display the program introduction
 00000000  BA 00000000 R		MOV				EDX, OFFSET intro
 00000005  E8 00000000 E		CALL			WriteString

					; Display extra credit lines
 0000000A  BA 00000041 R		MOV				EDX, OFFSET extraCredit
 0000000F  E8 00000000 E		CALL			WriteString

					; Display instructions
 00000014  BA 000000F3 R		MOV				EDX, OFFSET instructionsInt
 00000019  E8 00000000 E		CALL			WriteString

					;-------------------------------------------------------------------
					; This section of the program goes through a loop to read in 
					; the required number of values.
					;-------------------------------------------------------------------
					; Set up counter for loop for reading Int values and beginning of array of SDWORDS
 0000001E  B9 0000000A			MOV				ECX, VALUE_COUNT
 00000023  BF 0000025F R		MOV				EDI, OFFSET readValueInt
 00000028  C7 05 000002B3 R		MOV				numberCount, 1
	   00000001
 00000032  C7 05 000002B7 R		MOV				subTotal, 0
	   00000000

					; Loop for reading in intger values
 0000003C			_readInts:
					; Show the current input number and subtotal
 0000003C  BA 000002BB R		MOV				EDX, OFFSET numberCountText
 00000041  E8 00000000 E		CALL			WriteString
 00000046  FF 35 000002B3 R		PUSH			numberCount
 0000004C  E8 000001CE			CALL			WriteVal
 00000051  BA 000002C3 R		MOV				EDX, OFFSET subTotalText
 00000056  E8 00000000 E		CALL			WriteString
 0000005B  FF 35 000002B7 R		PUSH			subTotal
 00000061  E8 000001B9			CALL			WriteVal

					; Put required variables for calling ReadVal on the stack and call ReadVal
 00000066  57				PUSH			EDI
 00000067  68 000002D1 R		PUSH			OFFSET enterPromptInt
 0000006C  68 0000031C R		PUSH			OFFSET errorPrompt
 00000071  6A 33			PUSH			OFFSET MAX_READ
 00000073  68 000002AF R		PUSH			OFFSET bytesRead
 00000078  E8 000000A2			CALL			ReadVal

					; Update count and subtotal, move to the next value in the array of integer
 0000007D  FF 05 000002B3 R		INC				numberCount
 00000083  8B 07			MOV				EAX, [EDI]
 00000085  01 05 000002B7 R		ADD				subTotal, EAX
 0000008B  83 C7 04			ADD				EDI, 4
 0000008E  E2 AC			LOOP			_readInts


					;-------------------------------------------------------------------
					; This section of the program goes through a loop to write 
					; out the values that were read in.
					;-------------------------------------------------------------------
					; Prepare for writine out values
 00000090  B9 0000000A			MOV				ECX, VALUE_COUNT
 00000095  BE 0000025F R		MOV				ESI, OFFSET readValueInt

					; Display the text that introduces the integer
 0000009A  BA 00000374 R		MOV				EDX, OFFSET textEnterVals
 0000009F  E8 00000000 E		CALL			WriteString

					; Loop for writing out integers
 000000A4			_showInts:	
					; Put interger to show on stack and write it out
 000000A4  FF 36			PUSH			[ESI]
 000000A6  E8 00000174			CALL			WriteVal

					; Write a comma and space, except for last item
 000000AB  83 F9 01			CMP				ECX, 1
 000000AE  74 0A			JE				_noComma
 000000B0  BA 00000390 R		MOV				EDX, OFFSET commaSpace
 000000B5  E8 00000000 E		CALL			WriteString

					; Jump here on the last item to skip putting a comma
 000000BA			_noComma:
					; Move to the next value and loop
 000000BA  83 C6 04			ADD				ESI, 4
 000000BD  E2 E5			LOOP			_showInts

					; After showing the integer, a new line is needed
 000000BF  E8 00000000 E		CALL			CrLf

					;-------------------------------------------------------------------
					; This section of the program calculates the sum of the numbers
					; and the average of the numbers and then displays them.
					;-------------------------------------------------------------------
					; Clear EAX for use as an accumulator
 000000C4  33 C0			XOR				EAX, EAX

					; Set up ESI to read in the ints and ECX to count
 000000C6  BE 0000025F R		MOV				ESI, OFFSET readValueInt
 000000CB  B9 0000000A			MOV				ECX, VALUE_COUNT

					; Add up integers to get sum
 000000D0			_addAnotherInt:
 000000D0  03 06			ADD				EAX, [ESI]
 000000D2  83 C6 04			ADD				ESI, TYPE SDWORD
 000000D5  E2 F9			LOOP			_addAnotherInt

					; Show the text string for the sum
 000000D7  BA 00000393 R		MOV				EDX, OFFSET textSum
 000000DC  E8 00000000 E		CALL			WriteString
 000000E1  50				PUSH			EAX
 000000E2  E8 00000138			CALL			WriteVal
 000000E7  E8 00000000 E		CALL			CrLf

					; Calculate the average
 000000EC  BB 0000000A			MOV				EBX, VALUE_COUNT
 000000F1  99				CDQ
 000000F2  F7 FB			IDIV			EBX

					; Show the text string for the average
 000000F4  BA 000003AE R		MOV				EDX, OFFSET textAvg
 000000F9  E8 00000000 E		CALL			WriteString
 000000FE  50				PUSH			EAX
 000000FF  E8 0000011B			CALL			WriteVal
 00000104  E8 00000000 E		CALL			CrLf
 00000109  E8 00000000 E		CALL			CrLf

					; Say goodbye
 0000010E  BA 000003CD R		MOV				EDX, OFFSET goodBye
 00000113  E8 00000000 E		CALL			WriteString

					Invoke ExitProcess, 0				; exit to operating system
 00000118  6A 00	   *	    push   +000000000h
 0000011A  E8 00000000 E   *	    call   ExitProcess
 0000011F			main				ENDP


				;--------------------------------------------------------------------------------------------------------------
				; Name: ReadVal
				;
				; Description:	Reads in console input, validates that the input is not too long to be an SDWORD
				;				and that the input is a valid number. Also accepts +/- signs. If number is not
				;				valid, user will be prompted to try entering a number again.
				;
				; Preconditions: None
				;
				; Postconditions: Values at [EBP + 8] may be modified
				;
				; Receives:
				;			[EBP + 8]	=	Number of bytes read
				;			[EBP + 12]	=	Maximum number of bytes to read
				;			[EBP + 16]	=	Prompt to display when an error is detected
				;			[EBP + 20]	=	Basic prompt for an integer
				;			[EBP + 24]	=	Adddress of variable to store SDWORD
				;
				; Returns:
				;			[EBP + 24]	=	Entered string as an SDWORD 
				;
				;--------------------------------------------------------------------------------------------------------------
 0000011F			ReadVal		PROC
					; Set up stack base pointer and preseve modified registers
					LOCAL		inputString:	DWORD			; Offest of location for read in string on stack
					LOCAL		finalMult:		SDWORD			; Multiplier to make value positive or negative
					LOCAL		maxBytes:		DWORD			; Max bytes to read for valid input
					LOCAL		currentValue:	DWORD			; Holds the currently read value from the string
 0000011F  55		   *	    push   ebp
 00000120  8B EC	   *	    mov    ebp, esp
 00000122  83 C4 F0	   *	    add    esp, 0FFFFFFF0h
 00000125  57				PUSH		EDI
 00000126  52				PUSH		EDX
 00000127  56				PUSH		ESI
 00000128  51				PUSH		ECX
 00000129  50				PUSH		EAX
 0000012A  53				PUSH		EBX

					; Move ESP down by max number of bytes to read and store in top in inputString and make sure direction flag is set
 0000012B  2B 65 0C			SUB			ESP, [EBP + 12]
 0000012E  89 65 FC			MOV			inputString, ESP
 00000131  FC				CLD

					; Default to a multiplier of 1 (positive) and max bytes without a sign
 00000132  C7 45 F8			MOV			finalMult, 1
	   00000001
 00000139  C7 45 F4			MOV			maxBytes, 10
	   0000000A

					; Make sure the passed SDWORD variable is empty
 00000140  8B 7D 18			MOV			EDI, [EBP + 24]
 00000143  BB 00000000			MOV			EBX, 0
 00000148  89 1F			MOV			[EDI], EBX

					; Prompt user and read in string
					mGetString	[EBP + 20], inputString, [EBP + 12], [EBP + 8]
 0000014A  50		     1		PUSH		EAX
 0000014B  51		     1		PUSH		ECX
 0000014C  52		     1		PUSH		EDX
 0000014D  8B 55 14	     1		MOV			EDX, [EBP + 20]
 00000150  E8 00000000 E     1		CALL		WriteString
 00000155  8B 55 FC	     1		MOV			EDX, inputString
 00000158  8B 4D 0C	     1		MOV			ECX, [EBP + 12]
 0000015B  E8 00000000 E     1		CALL		ReadString
 00000160  89 45 08	     1		MOV			[[EBP + 8]], EAX
 00000163  5A		     1		POP			EDX
 00000164  59		     1		POP			ECX
 00000165  58		     1		POP			EAX

					; Jump here to test new input after finding invalid input
 00000166			_startAgain:

					; Set up the counter for number of values to read
 00000166  8B 4D 08			MOV			ECX, [EBP + 8]

					; Load the first value
 00000169  8B 75 FC			MOV			ESI, inputString
 0000016C  33 C0			XOR			EAX, EAX			; Clears EAX before writing a byte
 0000016E  AC				LODSB

					; Check if the first value in the string is a +
 0000016F  83 F8 2B			CMP			EAX, 43
 00000172  75 07			JNE			_notPlus
 00000174  AC				LODSB
 00000175  49				DEC			ECX
 00000176  FF 45 F4			INC			maxBytes			; One valid byte is taken up by the sign
 00000179  EB 11			JMP			_checkLength
					
					; Check if the first value in the string is a - and set to finalMult to -1 to make value negative at end
 0000017B			_notPlus:
 0000017B  83 F8 2D			CMP			EAX, 45
 0000017E  75 0C			JNE			_checkLength
 00000180  C7 45 F8			MOV			finalMult, -1
	   FFFFFFFF
 00000187  FF 45 F4			INC			maxBytes			; One valid byte is taken up by the sign
 0000018A  AC				LODSB
 0000018B  49				DEC			ECX

					; Check that the input string was not too long
 0000018C			_checkLength:
 0000018C  50				PUSH		EAX
 0000018D  8B 45 08			MOV			EAX, [EBP + 8]
 00000190  3B 45 F4			CMP			EAX, maxBytes
 00000193  58				POP			EAX
 00000194  7F 43			JG			_invalid

					; Loop through all input values, validating each one
 00000196			_mainLoop:
					; Checks if the current value is less than a 0 in ASCII
 00000196  83 F8 30			CMP			EAX, 48
 00000199  7C 3E			JL			_invalid
					; Checks if the current value is greater than 9 in ASCII
 0000019B  83 F8 39			CMP			EAX, 57
 0000019E  7F 39			JG			_invalid

					; Reduce EAX by 48 to make 0 ASCII into 0 int
 000001A0  83 E8 30			SUB			EAX, 48

					; Multiply [EBP + 24] by 10 and add the new value
 000001A3  BB 0000000A			MOV			EBX, 10
 000001A8  89 45 F0			MOV			currentValue, EAX
 000001AB  8B 07			MOV			EAX, [EDI]
 000001AD  F7 E3			MUL			EBX
					; Make sure the carry flag has not been set when we add
 000001AF  72 28			JC			_invalid
 000001B1  89 07			MOV			[EDI], EAX
 000001B3  8B 45 F0			MOV			EAX, currentValue
 000001B6  01 07			ADD			[EDI], EAX
					; Make sure the carry flag has not been set when we multiply
 000001B8  72 1F			JC			_invalid


					; Move to next value
 000001BA  AC				LODSB
 000001BB  E2 D9			LOOP		_mainLoop

					; Check whether the value is too great for a positive or negative SDWORD
 000001BD  BB 80000000			MOV			EBX, 2147483648
 000001C2  3B 1F			CMP			EBX, [EDI]
 000001C4  72 13			JB			_invalid
 000001C6  74 02			JE			_checkNegative
 000001C8  EB 06			JMP			_sizeCheckPassed

					; Check if the value is negative, if it's not the number entered was too large
 000001CA			_checkNegative:
 000001CA  83 7D F8 FF			CMP			finalMult, -1
 000001CE  75 09			JNE			_invalid

					; Jumping here after checking the number is less or equal to than 2^31 - 1 and greater than or equal to -2^31
 000001D0			_sizeCheckPassed:

					; Multiply by finalMult to get correct sign
 000001D0  8B 07			MOV			EAX, [EDI]
 000001D2  F7 65 F8			MUL			finalMult
 000001D5  89 07			MOV			[EDI], EAX

					; Ensure the invalid logic is skipped if string successfully read in
 000001D7  EB 39			JMP			_endOfProc



					; Handles the case of an invalid input with a new prompt
 000001D9			_invalid:
					; Default to a multiplier of 1 (positive) and max bytes without a sign
 000001D9  C7 45 F8			MOV			finalMult, 1
	   00000001
 000001E0  C7 45 F4			MOV			maxBytes, 10
	   0000000A

					; Make sure the passed SDWORD variable is empty
 000001E7  8B 7D 18			MOV			EDI, [EBP + 24]
 000001EA  BB 00000000			MOV			EBX, 0
 000001EF  89 1F			MOV			[EDI], EBX

					; Prompt user with error message and read in string
					mGetString	[EBP + 16], inputString, [EBP + 12], [EBP + 8]
 000001F1  50		     1		PUSH		EAX
 000001F2  51		     1		PUSH		ECX
 000001F3  52		     1		PUSH		EDX
 000001F4  8B 55 10	     1		MOV			EDX, [EBP + 16]
 000001F7  E8 00000000 E     1		CALL		WriteString
 000001FC  8B 55 FC	     1		MOV			EDX, inputString
 000001FF  8B 4D 0C	     1		MOV			ECX, [EBP + 12]
 00000202  E8 00000000 E     1		CALL		ReadString
 00000207  89 45 08	     1		MOV			[[EBP + 8]], EAX
 0000020A  5A		     1		POP			EDX
 0000020B  59		     1		POP			ECX
 0000020C  58		     1		POP			EAX
 0000020D  E9 FFFFFF54			JMP			_startAgain

					; Jump when procedure finishes successfully
 00000212			_endOfProc:
					

					; Restore modified registers
 00000212  03 65 0C			ADD			ESP, [EBP + 12]
 00000215  5B				POP			EBX
 00000216  58				POP			EAX
 00000217  59				POP			ECX
 00000218  5E				POP			ESI
 00000219  5A				POP			EDX
 0000021A  5F				POP			EDI
 0000021B  C9		   *	    leave  
 0000021C  C2 0014			RET			20
 0000021F			ReadVal		ENDP


				;--------------------------------------------------------------------------------------------------------------
				; Name: WriteVal
				;
				; Description: Writes out the passed SDWORD to the console
				;
				; Preconditions: Passed value is an SDWORD
				;
				; Postconditions: None
				;
				; Receives:
				;			[EBP + 8]	=	SDWORD to write out as a string
				;
				; Returns: Nothing
				;
				;--------------------------------------------------------------------------------------------------------------
 0000021F			WriteVal		PROC
					; Set up local variables and preseve modified registers
					LOCAL		outputString: DWORD			; Offest of location for string to display on the stack
					LOCAL		negativeSign: DWORD			; Tracks whether to include a negative sign at the front of the string
 0000021F  55		   *	    push   ebp
 00000220  8B EC	   *	    mov    ebp, esp
 00000222  83 C4 F8	   *	    add    esp, 0FFFFFFF8h
 00000225  83 EC 0C			SUB			ESP, 12						; Make room for a string of up to 10 numbers, plus sign, plus null
 00000228  89 65 FC			MOV			outputString, ESP
 0000022B  50				PUSH		EAX
 0000022C  57				PUSH		EDI
 0000022D  53				PUSH		EBX

					; We'll move down the string from bottom (high mem address) to top (low mem address) so set direction flag
 0000022E  FD				STD

					; Load the end of the string into EDI and add a null
 0000022F  8B 5D FC			MOV			EBX, outputString
 00000232  83 C3 0B			ADD			EBX, 11
 00000235  8B FB			MOV			EDI, EBX
 00000237  33 C0			XOR			EAX, EAX
 00000239  AA				STOSB		

					;	Get the value read for reading to a string
 0000023A  8B 45 08			MOV			EAX, [EBP + 8]

					; Check if it's negative
 0000023D  83 F8 00			CMP			EAX, 0
 00000240  7D 10			JGE			_notNegative
					
					; Make positive and set negative flag
 00000242  BB FFFFFFFF			MOV			EBX, -1
 00000247  F7 E3			MUL			EBX
 00000249  C7 45 F8			MOV			negativeSign, 45			; Move in the ASCII character for a negative sign
	   0000002D
 00000250  EB 07			JMP			_convertToString

					; Jump here if the entered value was positive
 00000252			_notNegative:
					; Set negativeSign to 0 so it will be skipped
 00000252  C7 45 F8			MOV			negativeSign, 0
	   00000000

					; Add values to string until all values are read
 00000259			_convertToString:
					; Divide the current value by 10 to get the remainder
 00000259  BB 0000000A			MOV			EBX, 10
 0000025E  33 D2			XOR			EDX, EDX
 00000260  F7 F3			DIV			EBX
					;	Move the remainder into the string
 00000262  50				PUSH		EAX
 00000263  8B C2			MOV			EAX, EDX
 00000265  83 C0 30			ADD			EAX, 48			; Add 48 to make 0 into ASCII 0
 00000268  AA				STOSB
 00000269  58				POP			EAX

					; Check if the quotient is 0, if so, that's the end of the number
 0000026A  83 F8 00			CMP			EAX, 0
 0000026D  75 EA			JNE			_convertToString

					; Check if the value was negative and add negative sign if needed
 0000026F  83 7D F8 2D			CMP			negativeSign, 45
 00000273  75 04			JNE			_noNegSign
 00000275  8B 45 F8			MOV			EAX, negativeSign
 00000278  AA				STOSB

 00000279			_noNegSign:
					; ESI should point to one higher than the output string, a
 00000279  89 7D FC			MOV			outputString, EDI
 0000027C  83 45 FC 01			ADD			outputString, 1

					; Display the string
					mDisplayString	outputString
 00000280  52		     1		PUSH		EDX
 00000281  8B 55 FC	     1		MOV			EDX, outputString
 00000284  E8 00000000 E     1		CALL		WriteString
 00000289  5A		     1		POP			EDX
					
					; Restore modified registers and clean up manually set local variables
 0000028A  5B				POP			EBX
 0000028B  5F				POP			EDI
 0000028C  58				POP			EAX
 0000028D  83 C4 0C			ADD			ESP, 12
 00000290  C9		   *	    leave  
 00000291  C2 0004			RET			4
 00000294			WriteVal		ENDP

				END main
Microsoft (R) Macro Assembler Version 14.28.29335.0	    03/13/21 09:07:58
<Project 6 - String Primitives and Macros Parameters     (Pr  Symbols 2 - 1




Macros:

                N a m e                 Type

mDisplayString . . . . . . . . .	Proc
mGetString . . . . . . . . . . .	Proc


Structures and Unions:

                N a m e                  Size
                                         Offset      Type

CONSOLE_CURSOR_INFO  . . . . . .	 00000008
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  bVisible . . . . . . . . . . .	 00000004	 DWord
CONSOLE_SCREEN_BUFFER_INFO . . .	 00000016
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCursorPosition . . . . . . .	 00000004	 DWord
  wAttributes  . . . . . . . . .	 00000008	 Word
  srWindow . . . . . . . . . . .	 0000000A	 QWord
  dwMaximumWindowSize  . . . . .	 00000012	 DWord
COORD  . . . . . . . . . . . . .	 00000004
  X  . . . . . . . . . . . . . .	 00000000	 Word
  Y  . . . . . . . . . . . . . .	 00000002	 Word
FILETIME . . . . . . . . . . . .	 00000008
  loDateTime . . . . . . . . . .	 00000000	 DWord
  hiDateTime . . . . . . . . . .	 00000004	 DWord
FOCUS_EVENT_RECORD . . . . . . .	 00000004
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
FPU_ENVIRON  . . . . . . . . . .	 0000001C
  controlWord  . . . . . . . . .	 00000000	 Word
  statusWord . . . . . . . . . .	 00000004	 Word
  tagWord  . . . . . . . . . . .	 00000008	 Word
  instrPointerOffset . . . . . .	 0000000C	 DWord
  instrPointerSelector . . . . .	 00000010	 DWord
  operandPointerOffset . . . . .	 00000014	 DWord
  operandPointerSelector . . . .	 00000018	 Word
INPUT_RECORD . . . . . . . . . .	 00000014
  EventType  . . . . . . . . . .	 00000000	 Word
  Event  . . . . . . . . . . . .	 00000004	 XmmWord
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCommandId  . . . . . . . . .	 00000000	 DWord
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
KEY_EVENT_RECORD . . . . . . . .	 00000010
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
MENU_EVENT_RECORD  . . . . . . .	 00000004
  dwCommandId  . . . . . . . . .	 00000000	 DWord
MOUSE_EVENT_RECORD . . . . . . .	 00000010
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
SMALL_RECT . . . . . . . . . . .	 00000008
  Left . . . . . . . . . . . . .	 00000000	 Word
  Top  . . . . . . . . . . . . .	 00000002	 Word
  Right  . . . . . . . . . . . .	 00000004	 Word
  Bottom . . . . . . . . . . . .	 00000006	 Word
SYSTEMTIME . . . . . . . . . . .	 00000010
  wYear  . . . . . . . . . . . .	 00000000	 Word
  wMonth . . . . . . . . . . . .	 00000002	 Word
  wDayOfWeek . . . . . . . . . .	 00000004	 Word
  wDay . . . . . . . . . . . . .	 00000006	 Word
  wHour  . . . . . . . . . . . .	 00000008	 Word
  wMinute  . . . . . . . . . . .	 0000000A	 Word
  wSecond  . . . . . . . . . . .	 0000000C	 Word
  wMilliseconds  . . . . . . . .	 0000000E	 Word
WINDOW_BUFFER_SIZE_RECORD  . . .	 00000004
  dwSize . . . . . . . . . . . .	 00000000	 DWord


Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

FLAT . . . . . . . . . . . . . .	GROUP
STACK  . . . . . . . . . . . . .	32 Bit	 00001000 Para	  Stack	  'STACK'	 
_DATA  . . . . . . . . . . . . .	32 Bit	 00000401 Para	  Public  'DATA'	
_TEXT  . . . . . . . . . . . . .	32 Bit	 00000294 Para	  Public  'CODE'	


Procedures, parameters, and locals:

                N a m e                 Type     Value    Attr

CloseFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CloseHandle  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Clrscr . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateFileA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateOutputFile . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Crlf . . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Delay  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpMem  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpRegs . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ExitProcess  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToDosDateTime  . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToSystemTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FlushConsoleInputBuffer  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FormatMessageA . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandLineA  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandTail . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCP . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleScreenBufferInfo . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetDateTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetFileTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetKeyState  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLastError . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMaxXY . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMseconds  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetNumberOfConsoleInputEvents  .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetProcessHeap . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetStdHandle . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetSystemTime  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTickCount . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Gotoxy . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapAlloc  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapCreate . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapDestroy  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapFree . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapSize . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
IsDigit  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
LocalFree  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MessageBoxA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBoxAsk  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBox . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
OpenInputFile  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseDecimal32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseInteger32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
PeekConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Random32 . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
RandomRange  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Randomize  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadChar . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleA . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadDec  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFile . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFloat  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFromFile . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadHex  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadInt  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKeyFlush . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKey  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadString . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadVal  . . . . . . . . . . . .	P Near	 0000011F _TEXT	Length= 00000100 Public STDCALL
  inputString  . . . . . . . . .	DWord	 bp - 00000004
  finalMult  . . . . . . . . . .	DWord	 bp - 00000008
  maxBytes . . . . . . . . . . .	DWord	 bp - 0000000C
  currentValue . . . . . . . . .	DWord	 bp - 00000010
  _startAgain  . . . . . . . . .	L Near	 00000166 _TEXT	
  _notPlus . . . . . . . . . . .	L Near	 0000017B _TEXT	
  _checkLength . . . . . . . . .	L Near	 0000018C _TEXT	
  _mainLoop  . . . . . . . . . .	L Near	 00000196 _TEXT	
  _checkNegative . . . . . . . .	L Near	 000001CA _TEXT	
  _sizeCheckPassed . . . . . . .	L Near	 000001D0 _TEXT	
  _invalid . . . . . . . . . . .	L Near	 000001D9 _TEXT	
  _endOfProc . . . . . . . . . .	L Near	 00000212 _TEXT	
SetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorPosition . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleScreenBufferSize . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTextAttribute  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTitleA . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleWindowInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetFilePointer . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ShowFPUStack . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Sleep  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
StrLength  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_compare  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_copy . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_length . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_trim . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_ucase  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SystemTimeToFileTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WaitMsg  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBinB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBin . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteChar  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleA  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputAttribute  . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputCharacterA . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteDec . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFloat . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHexB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHex . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteInt . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrameName  . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrame  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteString  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteToFile  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteVal . . . . . . . . . . . .	P Near	 0000021F _TEXT	Length= 00000075 Public STDCALL
  outputString . . . . . . . . .	DWord	 bp - 00000004
  negativeSign . . . . . . . . .	DWord	 bp - 00000008
  _notNegative . . . . . . . . .	L Near	 00000252 _TEXT	
  _convertToString . . . . . . .	L Near	 00000259 _TEXT	
  _noNegSign . . . . . . . . . .	L Near	 00000279 _TEXT	
WriteWindowsMsg  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
main . . . . . . . . . . . . . .	P Near	 00000000 _TEXT	Length= 0000011F Public STDCALL
  _readInts  . . . . . . . . . .	L Near	 0000003C _TEXT	
  _showInts  . . . . . . . . . .	L Near	 000000A4 _TEXT	
  _noComma . . . . . . . . . . .	L Near	 000000BA _TEXT	
  _addAnotherInt . . . . . . . .	L Near	 000000D0 _TEXT	
printf . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
scanf  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
wsprintfA  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C


Symbols:

                N a m e                 Type     Value    Attr

@CodeSize  . . . . . . . . . . .	Number	 00000000h   
@DataSize  . . . . . . . . . . .	Number	 00000000h   
@Interface . . . . . . . . . . .	Number	 00000003h   
@Model . . . . . . . . . . . . .	Number	 00000007h   
@code  . . . . . . . . . . . . .	Text   	 _TEXT
@data  . . . . . . . . . . . . .	Text   	 FLAT
@fardata?  . . . . . . . . . . .	Text   	 FLAT
@fardata . . . . . . . . . . . .	Text   	 FLAT
@stack . . . . . . . . . . . . .	Text   	 FLAT
ALT_MASK . . . . . . . . . . . .	Number	 00000003h   
CAPSLOCK_ON  . . . . . . . . . .	Number	 00000080h   
CREATE_ALWAYS  . . . . . . . . .	Number	 00000002h   
CREATE_NEW . . . . . . . . . . .	Number	 00000001h   
CTRL_MASK  . . . . . . . . . . .	Number	 0000000Ch   
CreateFile . . . . . . . . . . .	Text   	 CreateFileA
DO_NOT_SHARE . . . . . . . . . .	Number	 00000000h   
ENABLE_ECHO_INPUT  . . . . . . .	Number	 00000004h   
ENABLE_LINE_INPUT  . . . . . . .	Number	 00000002h   
ENABLE_MOUSE_INPUT . . . . . . .	Number	 00000010h   
ENABLE_PROCESSED_INPUT . . . . .	Number	 00000001h   
ENABLE_PROCESSED_OUTPUT  . . . .	Number	 00000001h   
ENABLE_WINDOW_INPUT  . . . . . .	Number	 00000008h   
ENABLE_WRAP_AT_EOL_OUTPUT  . . .	Number	 00000002h   
ENHANCED_KEY . . . . . . . . . .	Number	 00000100h   
FALSE  . . . . . . . . . . . . .	Number	 00000000h   
FILE_APPEND_DATA . . . . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_ARCHIVE . . . . .	Number	 00000020h   
FILE_ATTRIBUTE_COMPRESSED  . . .	Number	 00000800h   
FILE_ATTRIBUTE_DEVICE  . . . . .	Number	 00000040h   
FILE_ATTRIBUTE_DIRECTORY . . . .	Number	 00000010h   
FILE_ATTRIBUTE_ENCRYPTED . . . .	Number	 00004000h   
FILE_ATTRIBUTE_HIDDEN  . . . . .	Number	 00000002h   
FILE_ATTRIBUTE_NORMAL  . . . . .	Number	 00000080h   
FILE_ATTRIBUTE_NOT_CONTENT_INDEXED .	Number	 00002000h   
FILE_ATTRIBUTE_OFFLINE . . . . .	Number	 00001000h   
FILE_ATTRIBUTE_READONLY  . . . .	Number	 00000001h   
FILE_ATTRIBUTE_REPARSE_POINT . .	Number	 00000400h   
FILE_ATTRIBUTE_SPARSE_FILE . . .	Number	 00000200h   
FILE_ATTRIBUTE_SYSTEM  . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_TEMPORARY . . . .	Number	 00000100h   
FILE_BEGIN . . . . . . . . . . .	Number	 00000000h   
FILE_CURRENT . . . . . . . . . .	Number	 00000001h   
FILE_DELETE_CHILD  . . . . . . .	Number	 00000040h   
FILE_END . . . . . . . . . . . .	Number	 00000002h   
FILE_READ_DATA . . . . . . . . .	Number	 00000001h   
FILE_SHARE_DELETE  . . . . . . .	Number	 00000004h   
FILE_SHARE_READ  . . . . . . . .	Number	 00000001h   
FILE_SHARE_WRITE . . . . . . . .	Number	 00000002h   
FILE_WRITE_DATA  . . . . . . . .	Number	 00000002h   
FOCUS_EVENT  . . . . . . . . . .	Number	 00000010h   
FORMAT_MESSAGE_ALLOCATE_BUFFER .	Number	 00000100h   
FORMAT_MESSAGE_FROM_SYSTEM . . .	Number	 00001000h   
FormatMessage  . . . . . . . . .	Text   	 FormatMessageA
GENERIC_ALL  . . . . . . . . . .	Number	 10000000h   
GENERIC_EXECUTE  . . . . . . . .	Number	 20000000h   
GENERIC_READ . . . . . . . . . .	Number	 -80000000h   
GENERIC_WRITE  . . . . . . . . .	Number	 40000000h   
GetCommandLine . . . . . . . . .	Text   	 GetCommandLineA
HANDLE . . . . . . . . . . . . .	Text   	 DWORD
HEAP_GENERATE_EXCEPTIONS . . . .	Number	 00000004h   
HEAP_GROWABLE  . . . . . . . . .	Number	 00000002h   
HEAP_NO_SERIALIZE  . . . . . . .	Number	 00000001h   
HEAP_REALLOC_IN_PLACE_ONLY . . .	Number	 00000010h   
HEAP_ZERO_MEMORY . . . . . . . .	Number	 00000008h   
IDABORT  . . . . . . . . . . . .	Number	 00000003h   
IDCANCEL . . . . . . . . . . . .	Number	 00000002h   
IDCLOSE  . . . . . . . . . . . .	Number	 00000008h   
IDCONTINUE . . . . . . . . . . .	Number	 0000000Bh   
IDHELP . . . . . . . . . . . . .	Number	 00000009h   
IDIGNORE . . . . . . . . . . . .	Number	 00000005h   
IDNO . . . . . . . . . . . . . .	Number	 00000007h   
IDOK . . . . . . . . . . . . . .	Number	 00000001h   
IDRETRY  . . . . . . . . . . . .	Number	 00000004h   
IDTIMEOUT  . . . . . . . . . . .	Number	 00007D00h   
IDTRYAGAIN . . . . . . . . . . .	Number	 0000000Ah   
IDYES  . . . . . . . . . . . . .	Number	 00000006h   
INVALID_HANDLE_VALUE . . . . . .	Number	 -00000001h   
KBDOWN_FLAG  . . . . . . . . . .	Number	 00000001h   
KEY_EVENT  . . . . . . . . . . .	Number	 00000001h   
KEY_MASKS  . . . . . . . . . . .	Number	 0000001Fh   
LEFT_ALT_PRESSED . . . . . . . .	Number	 00000002h   
LEFT_CTRL_PRESSED  . . . . . . .	Number	 00000008h   
MAX_READ . . . . . . . . . . . .	Number	 00000033h   
MB_ABORTRETRYIGNORE  . . . . . .	Number	 00000002h   
MB_APPLMODAL . . . . . . . . . .	Number	 00000000h   
MB_CANCELTRYCONTINUE . . . . . .	Number	 00000006h   
MB_DEFBUTTON1  . . . . . . . . .	Number	 00000000h   
MB_DEFBUTTON2  . . . . . . . . .	Number	 00000100h   
MB_DEFBUTTON3  . . . . . . . . .	Number	 00000200h   
MB_DEFBUTTON4  . . . . . . . . .	Number	 00000300h   
MB_HELP  . . . . . . . . . . . .	Number	 00004000h   
MB_ICONASTERISK  . . . . . . . .	Number	 00000040h   
MB_ICONERROR . . . . . . . . . .	Number	 00000010h   
MB_ICONEXCLAMATION . . . . . . .	Number	 00000030h   
MB_ICONHAND  . . . . . . . . . .	Number	 00000010h   
MB_ICONINFORMATION . . . . . . .	Number	 00000040h   
MB_ICONQUESTION  . . . . . . . .	Number	 00000020h   
MB_ICONSTOP  . . . . . . . . . .	Number	 00000010h   
MB_ICONWARNING . . . . . . . . .	Number	 00000030h   
MB_OKCANCEL  . . . . . . . . . .	Number	 00000001h   
MB_OK  . . . . . . . . . . . . .	Number	 00000000h   
MB_RETRYCANCEL . . . . . . . . .	Number	 00000005h   
MB_SYSTEMMODAL . . . . . . . . .	Number	 00001000h   
MB_TASKMODAL . . . . . . . . . .	Number	 00002000h   
MB_USERICON  . . . . . . . . . .	Number	 00000080h   
MB_YESNOCANCEL . . . . . . . . .	Number	 00000003h   
MB_YESNO . . . . . . . . . . . .	Number	 00000004h   
MENU_EVENT . . . . . . . . . . .	Number	 00000008h   
MOUSE_EVENT  . . . . . . . . . .	Number	 00000002h   
MessageBox . . . . . . . . . . .	Text   	 MessageBoxA
NULL . . . . . . . . . . . . . .	Number	 00000000h   
NUMLOCK_ON . . . . . . . . . . .	Number	 00000020h   
OPEN_ALWAYS  . . . . . . . . . .	Number	 00000004h   
OPEN_EXISTING  . . . . . . . . .	Number	 00000003h   
PeekConsoleInput . . . . . . . .	Text   	 PeekConsoleInputA
REAL4_LENGTH . . . . . . . . . .	Number	 00000031h   
RIGHT_ALT_PRESSED  . . . . . . .	Number	 00000001h   
RIGHT_CTRL_PRESSED . . . . . . .	Number	 00000004h   
ReadConsoleInput . . . . . . . .	Text   	 ReadConsoleInputA
ReadConsole  . . . . . . . . . .	Text   	 ReadConsoleA
SCROLLLOCK_ON  . . . . . . . . .	Number	 00000040h   
SDWORD_LENGTH  . . . . . . . . .	Number	 0000000Bh   
SHIFT_MASK . . . . . . . . . . .	Number	 00000010h   
SHIFT_PRESSED  . . . . . . . . .	Number	 00000010h   
STD_ERROR_HANDLE . . . . . . . .	Number	 -0000000Ch   
STD_INPUT_HANDLE . . . . . . . .	Number	 -0000000Ah   
STD_OUTPUT_HANDLE  . . . . . . .	Number	 -0000000Bh   
SetConsoleTitle  . . . . . . . .	Text   	 SetConsoleTitleA
TAB  . . . . . . . . . . . . . .	Number	 00000009h   
TRUE . . . . . . . . . . . . . .	Number	 00000001h   
TRUNCATE_EXISTING  . . . . . . .	Number	 00000005h   
VALUE_COUNT  . . . . . . . . . .	Number	 0000000Ah   
VK_ADD . . . . . . . . . . . . .	Number	 0000006Bh   
VK_BACK  . . . . . . . . . . . .	Number	 00000008h   
VK_CANCEL  . . . . . . . . . . .	Number	 00000003h   
VK_CAPITAL . . . . . . . . . . .	Number	 00000014h   
VK_CLEAR . . . . . . . . . . . .	Number	 0000000Ch   
VK_CONTROL . . . . . . . . . . .	Number	 00000011h   
VK_DECIMAL . . . . . . . . . . .	Number	 0000006Eh   
VK_DELETE  . . . . . . . . . . .	Number	 0000002Eh   
VK_DIVIDE  . . . . . . . . . . .	Number	 0000006Fh   
VK_DOWN  . . . . . . . . . . . .	Number	 00000028h   
VK_END . . . . . . . . . . . . .	Number	 00000023h   
VK_ESCAPE  . . . . . . . . . . .	Number	 0000001Bh   
VK_EXECUTE . . . . . . . . . . .	Number	 0000002Bh   
VK_F10 . . . . . . . . . . . . .	Number	 00000079h   
VK_F11 . . . . . . . . . . . . .	Number	 0000007Ah   
VK_F12 . . . . . . . . . . . . .	Number	 0000007Bh   
VK_F13 . . . . . . . . . . . . .	Number	 0000007Ch   
VK_F14 . . . . . . . . . . . . .	Number	 0000007Dh   
VK_F15 . . . . . . . . . . . . .	Number	 0000007Eh   
VK_F16 . . . . . . . . . . . . .	Number	 0000007Fh   
VK_F17 . . . . . . . . . . . . .	Number	 00000080h   
VK_F18 . . . . . . . . . . . . .	Number	 00000081h   
VK_F19 . . . . . . . . . . . . .	Number	 00000082h   
VK_F1  . . . . . . . . . . . . .	Number	 00000070h   
VK_F20 . . . . . . . . . . . . .	Number	 00000083h   
VK_F21 . . . . . . . . . . . . .	Number	 00000084h   
VK_F22 . . . . . . . . . . . . .	Number	 00000085h   
VK_F23 . . . . . . . . . . . . .	Number	 00000086h   
VK_F24 . . . . . . . . . . . . .	Number	 00000087h   
VK_F2  . . . . . . . . . . . . .	Number	 00000071h   
VK_F3  . . . . . . . . . . . . .	Number	 00000072h   
VK_F4  . . . . . . . . . . . . .	Number	 00000073h   
VK_F5  . . . . . . . . . . . . .	Number	 00000074h   
VK_F6  . . . . . . . . . . . . .	Number	 00000075h   
VK_F7  . . . . . . . . . . . . .	Number	 00000076h   
VK_F8  . . . . . . . . . . . . .	Number	 00000077h   
VK_F9  . . . . . . . . . . . . .	Number	 00000078h   
VK_HELP  . . . . . . . . . . . .	Number	 0000002Fh   
VK_HOME  . . . . . . . . . . . .	Number	 00000024h   
VK_INSERT  . . . . . . . . . . .	Number	 0000002Dh   
VK_LBUTTON . . . . . . . . . . .	Number	 00000001h   
VK_LCONTROL  . . . . . . . . . .	Number	 000000A2h   
VK_LEFT  . . . . . . . . . . . .	Number	 00000025h   
VK_LMENU . . . . . . . . . . . .	Number	 000000A4h   
VK_LSHIFT  . . . . . . . . . . .	Number	 000000A0h   
VK_MENU  . . . . . . . . . . . .	Number	 00000012h   
VK_MULTIPLY  . . . . . . . . . .	Number	 0000006Ah   
VK_NEXT  . . . . . . . . . . . .	Number	 00000022h   
VK_NUMLOCK . . . . . . . . . . .	Number	 00000090h   
VK_NUMPAD0 . . . . . . . . . . .	Number	 00000060h   
VK_NUMPAD1 . . . . . . . . . . .	Number	 00000061h   
VK_NUMPAD2 . . . . . . . . . . .	Number	 00000062h   
VK_NUMPAD3 . . . . . . . . . . .	Number	 00000063h   
VK_NUMPAD4 . . . . . . . . . . .	Number	 00000064h   
VK_NUMPAD5 . . . . . . . . . . .	Number	 00000065h   
VK_NUMPAD6 . . . . . . . . . . .	Number	 00000066h   
VK_NUMPAD7 . . . . . . . . . . .	Number	 00000067h   
VK_NUMPAD8 . . . . . . . . . . .	Number	 00000068h   
VK_NUMPAD9 . . . . . . . . . . .	Number	 00000069h   
VK_PAUSE . . . . . . . . . . . .	Number	 00000013h   
VK_PRINT . . . . . . . . . . . .	Number	 0000002Ah   
VK_PRIOR . . . . . . . . . . . .	Number	 00000021h   
VK_RBUTTON . . . . . . . . . . .	Number	 00000002h   
VK_RCONTROL  . . . . . . . . . .	Number	 000000A3h   
VK_RETURN  . . . . . . . . . . .	Number	 0000000Dh   
VK_RIGHT . . . . . . . . . . . .	Number	 00000027h   
VK_RMENU . . . . . . . . . . . .	Number	 000000A5h   
VK_RSHIFT  . . . . . . . . . . .	Number	 000000A1h   
VK_SCROLL  . . . . . . . . . . .	Number	 00000091h   
VK_SEPARATER . . . . . . . . . .	Number	 0000006Ch   
VK_SHIFT . . . . . . . . . . . .	Number	 00000010h   
VK_SNAPSHOT  . . . . . . . . . .	Number	 0000002Ch   
VK_SPACE . . . . . . . . . . . .	Number	 00000020h   
VK_SUBTRACT  . . . . . . . . . .	Number	 0000006Dh   
VK_TAB . . . . . . . . . . . . .	Number	 00000009h   
VK_UP  . . . . . . . . . . . . .	Number	 00000026h   
WINDOW_BUFFER_SIZE_EVENT . . . .	Number	 00000004h   
WriteConsoleOutputCharacter  . .	Text   	 WriteConsoleOutputCharacterA
WriteConsole . . . . . . . . . .	Text   	 WriteConsoleA
black  . . . . . . . . . . . . .	Number	 00000000h   
blue . . . . . . . . . . . . . .	Number	 00000001h   
brown  . . . . . . . . . . . . .	Number	 00000006h   
bytesRead  . . . . . . . . . . .	DWord	 000002AF _DATA	
commaSpace . . . . . . . . . . .	Byte	 00000390 _DATA	
cyan . . . . . . . . . . . . . .	Number	 00000003h   
enterPromptInt . . . . . . . . .	Byte	 000002D1 _DATA	
enterPromptReal  . . . . . . . .	Byte	 000002F5 _DATA	
errorPrompt  . . . . . . . . . .	Byte	 0000031C _DATA	
exit . . . . . . . . . . . . . .	Text   	 INVOKE ExitProcess,0
extraCredit  . . . . . . . . . .	Byte	 00000041 _DATA	
goodBye  . . . . . . . . . . . .	Byte	 000003CD _DATA	
gray . . . . . . . . . . . . . .	Number	 00000008h   
green  . . . . . . . . . . . . .	Number	 00000002h   
instructionsInt  . . . . . . . .	Byte	 000000F3 _DATA	
intro  . . . . . . . . . . . . .	Byte	 00000000 _DATA	
lightBlue  . . . . . . . . . . .	Number	 00000009h   
lightCyan  . . . . . . . . . . .	Number	 0000000Bh   
lightGray  . . . . . . . . . . .	Number	 00000007h   
lightGreen . . . . . . . . . . .	Number	 0000000Ah   
lightMagenta . . . . . . . . . .	Number	 0000000Dh   
lightRed . . . . . . . . . . . .	Number	 0000000Ch   
magenta  . . . . . . . . . . . .	Number	 00000005h   
numberCountText  . . . . . . . .	Byte	 000002BB _DATA	
numberCount  . . . . . . . . . .	DWord	 000002B3 _DATA	
readValueFloat . . . . . . . . .	DWord	 00000287 _DATA	
readValueInt . . . . . . . . . .	DWord	 0000025F _DATA	
real4String  . . . . . . . . . .	Byte	 0000022C _DATA	
red  . . . . . . . . . . . . . .	Number	 00000004h   
sdwordString . . . . . . . . . .	Byte	 000001F9 _DATA	
subTotalText . . . . . . . . . .	Byte	 000002C3 _DATA	
subTotal . . . . . . . . . . . .	DWord	 000002B7 _DATA	
textAvg  . . . . . . . . . . . .	Byte	 000003AE _DATA	
textEnterVals  . . . . . . . . .	Byte	 00000374 _DATA	
textSum  . . . . . . . . . . . .	Byte	 00000393 _DATA	
white  . . . . . . . . . . . . .	Number	 0000000Fh   
wsprintf . . . . . . . . . . . .	Text   	 wsprintfA
yellow . . . . . . . . . . . . .	Number	 0000000Eh   

	   0 Warnings
	   0 Errors
